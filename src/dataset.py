{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pandas in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (2.2.3)\n",
      "Requirement already satisfied: numpy in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (2.1.3)\n",
      "Requirement already satisfied: matplotlib in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (3.10.0)\n",
      "Requirement already satisfied: seaborn in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (0.13.2)\n",
      "Requirement already satisfied: tabpfn in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (2.0.1)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from pandas) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from pandas) (2024.2)\n",
      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from pandas) (2025.1)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from matplotlib) (1.3.1)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from matplotlib) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from matplotlib) (4.55.7)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from matplotlib) (1.4.8)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from matplotlib) (24.2)\n",
      "Requirement already satisfied: pillow>=8 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from matplotlib) (11.1.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from matplotlib) (3.2.1)\n",
      "Requirement already satisfied: torch>=2.1 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from tabpfn) (2.6.0)\n",
      "Requirement already satisfied: scikit-learn>=1 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from tabpfn) (1.6.1)\n",
      "Requirement already satisfied: typing_extensions in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from tabpfn) (4.12.2)\n",
      "Requirement already satisfied: scipy in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from tabpfn) (1.15.1)\n",
      "Requirement already satisfied: einops in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from tabpfn) (0.8.0)\n",
      "Requirement already satisfied: huggingface-hub in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from tabpfn) (0.28.1)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
      "Requirement already satisfied: joblib>=1.2.0 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from scikit-learn>=1->tabpfn) (1.4.2)\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from scikit-learn>=1->tabpfn) (3.5.0)\n",
      "Requirement already satisfied: filelock in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from torch>=2.1->tabpfn) (3.17.0)\n",
      "Requirement already satisfied: networkx in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from torch>=2.1->tabpfn) (3.4.2)\n",
      "Requirement already satisfied: jinja2 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from torch>=2.1->tabpfn) (3.1.5)\n",
      "Requirement already satisfied: fsspec in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from torch>=2.1->tabpfn) (2025.2.0)\n",
      "Requirement already satisfied: setuptools in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from torch>=2.1->tabpfn) (75.8.0)\n",
      "Requirement already satisfied: sympy==1.13.1 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from torch>=2.1->tabpfn) (1.13.1)\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from sympy==1.13.1->torch>=2.1->tabpfn) (1.3.0)\n",
      "Requirement already satisfied: pyyaml>=5.1 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from huggingface-hub->tabpfn) (6.0.2)\n",
      "Requirement already satisfied: requests in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from huggingface-hub->tabpfn) (2.32.3)\n",
      "Requirement already satisfied: tqdm>=4.42.1 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from huggingface-hub->tabpfn) (4.67.1)\n",
      "Requirement already satisfied: colorama in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from tqdm>=4.42.1->huggingface-hub->tabpfn) (0.4.6)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from jinja2->torch>=2.1->tabpfn) (3.0.2)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from requests->huggingface-hub->tabpfn) (3.4.1)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from requests->huggingface-hub->tabpfn) (3.10)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from requests->huggingface-hub->tabpfn) (2.3.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from requests->huggingface-hub->tabpfn) (2024.12.14)\n",
      "Note: you may need to restart the kernel to use updated packages.\n",
      "Requirement already satisfied: scikit-learn in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (1.6.1)\n",
      "Requirement already satisfied: torch in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (2.6.0)\n",
      "Requirement already satisfied: gluonts in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (0.14.4)\n",
      "Requirement already satisfied: huggingface-hub in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (0.28.1)\n",
      "Requirement already satisfied: numpy>=1.19.5 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from scikit-learn) (2.1.3)\n",
      "Requirement already satisfied: scipy>=1.6.0 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from scikit-learn) (1.15.1)\n",
      "Requirement already satisfied: joblib>=1.2.0 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from scikit-learn) (1.4.2)\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from scikit-learn) (3.5.0)\n",
      "Requirement already satisfied: filelock in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from torch) (3.17.0)\n",
      "Requirement already satisfied: typing-extensions>=4.10.0 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from torch) (4.12.2)\n",
      "Requirement already satisfied: networkx in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from torch) (3.4.2)\n",
      "Requirement already satisfied: jinja2 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from torch) (3.1.5)\n",
      "Requirement already satisfied: fsspec in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from torch) (2025.2.0)\n",
      "Requirement already satisfied: setuptools in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from torch) (75.8.0)\n",
      "Requirement already satisfied: sympy==1.13.1 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from torch) (1.13.1)\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from sympy==1.13.1->torch) (1.3.0)\n",
      "Collecting numpy>=1.19.5 (from scikit-learn)\n",
      "  Using cached numpy-1.26.4-cp313-cp313-win_amd64.whl\n",
      "Collecting pandas<2.2.0,>=1.0 (from gluonts)\n",
      "  Using cached pandas-2.1.4.tar.gz (4.3 MB)\n",
      "  Installing build dependencies: started\n",
      "  Installing build dependencies: finished with status 'done'\n",
      "  Getting requirements to build wheel: started\n",
      "  Getting requirements to build wheel: finished with status 'done'\n",
      "  Installing backend dependencies: started\n",
      "  Installing backend dependencies: finished with status 'done'\n",
      "  Preparing metadata (pyproject.toml): started\n",
      "  Preparing metadata (pyproject.toml): finished with status 'error'\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  error: subprocess-exited-with-error\n",
      "  \n",
      "  × Preparing metadata (pyproject.toml) did not run successfully.\n",
      "  │ exit code: 1\n",
      "  ╰─> [73 lines of output]\n",
      "      + meson setup C:\\Users\\natha\\AppData\\Local\\Temp\\pip-install-s9sm9xok\\pandas_8646b2612ecc43dd8726d4e0a82d16da C:\\Users\\natha\\AppData\\Local\\Temp\\pip-install-s9sm9xok\\pandas_8646b2612ecc43dd8726d4e0a82d16da\\.mesonpy-_cyhosew\\build -Dbuildtype=release -Db_ndebug=if-release -Db_vscrt=md --vsenv --native-file=C:\\Users\\natha\\AppData\\Local\\Temp\\pip-install-s9sm9xok\\pandas_8646b2612ecc43dd8726d4e0a82d16da\\.mesonpy-_cyhosew\\build\\meson-python-native-file.ini\n",
      "      The Meson build system\n",
      "      Version: 1.2.1\n",
      "      Source dir: C:\\Users\\natha\\AppData\\Local\\Temp\\pip-install-s9sm9xok\\pandas_8646b2612ecc43dd8726d4e0a82d16da\n",
      "      Build dir: C:\\Users\\natha\\AppData\\Local\\Temp\\pip-install-s9sm9xok\\pandas_8646b2612ecc43dd8726d4e0a82d16da\\.mesonpy-_cyhosew\\build\n",
      "      Build type: native build\n",
      "      Project name: pandas\n",
      "      Project version: 2.1.4\n",
      "      Activating VS 17.12.4\n",
      "      C compiler for the host machine: cl (msvc 19.42.34436 \"Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34436 for x64\")\n",
      "      C linker for the host machine: link link 14.42.34436.0\n",
      "      C++ compiler for the host machine: cl (msvc 19.42.34436 \"Microsoft (R) C/C++ Optimizing Compiler Version 19.42.34436 for x64\")\n",
      "      C++ linker for the host machine: link link 14.42.34436.0\n",
      "      Cython compiler for the host machine: cython (cython 0.29.37)\n",
      "      Host machine cpu family: x86_64\n",
      "      Host machine cpu: x86_64\n",
      "      Program python found: YES (c:\\Users\\natha\\OneDrive\\Desktop\\MAIA Project\\.venv\\Scripts\\python.exe)\n",
      "      Run-time dependency python found: YES 3.13\n",
      "      Build targets in project: 53\n",
      "      \n",
      "      pandas 2.1.4\n",
      "      \n",
      "        User defined options\n",
      "          Native files: C:\\Users\\natha\\AppData\\Local\\Temp\\pip-install-s9sm9xok\\pandas_8646b2612ecc43dd8726d4e0a82d16da\\.mesonpy-_cyhosew\\build\\meson-python-native-file.ini\n",
      "          buildtype   : release\n",
      "          vsenv       : True\n",
      "          b_ndebug    : if-release\n",
      "          b_vscrt     : md\n",
      "      \n",
      "      Found ninja.EXE-1.11.1.git.kitware.jobserver-1 at C:\\Users\\natha\\AppData\\Local\\Temp\\pip-build-env-gr7q_l0a\\normal\\Scripts\\ninja.EXE\n",
      "      \n",
      "      Visual Studio environment is needed to run Ninja. It is recommended to use Meson wrapper:\n",
      "      C:\\Users\\natha\\AppData\\Local\\Temp\\pip-build-env-gr7q_l0a\\overlay\\Scripts\\meson compile -C .\n",
      "      + meson compile\n",
      "      Activating VS 17.12.4\n",
      "      INFO: automatically activated MSVC compiler environment\n",
      "      INFO: autodetecting backend as ninja\n",
      "      INFO: calculating backend command to run: C:\\Users\\natha\\AppData\\Local\\Temp\\pip-build-env-gr7q_l0a\\normal\\Scripts\\ninja.EXE\n",
      "      [1/151] Generating pandas/_libs/algos_take_helper_pxi with a custom command\n",
      "      [2/151] Generating pandas/_libs/khash_primitive_helper_pxi with a custom command\n",
      "      [3/151] Generating pandas/_libs/algos_common_helper_pxi with a custom command\n",
      "      [4/151] Generating pandas/_libs/hashtable_func_helper_pxi with a custom command\n",
      "      [5/151] Generating pandas/_libs/index_class_helper_pxi with a custom command\n",
      "      [6/151] Generating pandas/_libs/hashtable_class_helper_pxi with a custom command\n",
      "      [7/151] Generating pandas/_libs/intervaltree_helper_pxi with a custom command\n",
      "      [8/151] Generating pandas/_libs/sparse_op_helper_pxi with a custom command\n",
      "      [9/151] Generating pandas/__init__.py with a custom command\n",
      "      [10/151] Compiling C object pandas/_libs/tslibs/parsing.cp313-win_amd64.pyd.p/.._src_parser_tokenizer.c.obj\n",
      "      [11/151] Compiling Cython source C:/Users/natha/AppData/Local/Temp/pip-install-s9sm9xok/pandas_8646b2612ecc43dd8726d4e0a82d16da/pandas/_libs/tslibs/base.pyx\n",
      "      [12/151] Compiling Cython source C:/Users/natha/AppData/Local/Temp/pip-install-s9sm9xok/pandas_8646b2612ecc43dd8726d4e0a82d16da/pandas/_libs/tslibs/ccalendar.pyx\n",
      "      [13/151] Compiling C object pandas/_libs/tslibs/base.cp313-win_amd64.pyd.p/meson-generated_pandas__libs_tslibs_base.pyx.c.obj\n",
      "      \u001b[31mFAILED: \u001b[0mpandas/_libs/tslibs/base.cp313-win_amd64.pyd.p/meson-generated_pandas__libs_tslibs_base.pyx.c.obj\n",
      "      \"cl\" \"-Ipandas\\_libs\\tslibs\\base.cp313-win_amd64.pyd.p\" \"-Ipandas\\_libs\\tslibs\" \"-I..\\..\\pandas\\_libs\\tslibs\" \"-I..\\..\\..\\..\\pip-build-env-gr7q_l0a\\overlay\\Lib\\site-packages\\numpy\\core\\include\" \"-I..\\..\\pandas\\_libs\\include\" \"-IC:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.13_3.13.752.0_x64__qbz5n2kfra8p0\\Include\" \"-DNDEBUG\" \"/MD\" \"/nologo\" \"/showIncludes\" \"/utf-8\" \"-w\" \"/O2\" \"/Gw\" \"-DNPY_NO_DEPRECATED_API=0\" \"-DNPY_TARGET_VERSION=NPY_1_21_API_VERSION\" \"/Fdpandas\\_libs\\tslibs\\base.cp313-win_amd64.pyd.p\\meson-generated_pandas__libs_tslibs_base.pyx.c.pdb\" /Fopandas/_libs/tslibs/base.cp313-win_amd64.pyd.p/meson-generated_pandas__libs_tslibs_base.pyx.c.obj \"/c\" pandas/_libs/tslibs/base.cp313-win_amd64.pyd.p/pandas/_libs/tslibs/base.pyx.c\n",
      "      pandas/_libs/tslibs/base.cp313-win_amd64.pyd.p/pandas/_libs/tslibs/base.pyx.c(5397): error C2198: 'int _PyLong_AsByteArray(PyLongObject *,unsigned char *,size_t,int,int,int)': too few arguments for call\n",
      "      pandas/_libs/tslibs/base.cp313-win_amd64.pyd.p/pandas/_libs/tslibs/base.pyx.c(5631): error C2198: 'int _PyLong_AsByteArray(PyLongObject *,unsigned char *,size_t,int,int,int)': too few arguments for call\n",
      "      [14/151] Compiling C object pandas/_libs/tslibs/ccalendar.cp313-win_amd64.pyd.p/meson-generated_pandas__libs_tslibs_ccalendar.pyx.c.obj\n",
      "      \u001b[31mFAILED: \u001b[0mpandas/_libs/tslibs/ccalendar.cp313-win_amd64.pyd.p/meson-generated_pandas__libs_tslibs_ccalendar.pyx.c.obj\n",
      "      \"cl\" \"-Ipandas\\_libs\\tslibs\\ccalendar.cp313-win_amd64.pyd.p\" \"-Ipandas\\_libs\\tslibs\" \"-I..\\..\\pandas\\_libs\\tslibs\" \"-I..\\..\\..\\..\\pip-build-env-gr7q_l0a\\overlay\\Lib\\site-packages\\numpy\\core\\include\" \"-I..\\..\\pandas\\_libs\\include\" \"-IC:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.13_3.13.752.0_x64__qbz5n2kfra8p0\\Include\" \"-DNDEBUG\" \"/MD\" \"/nologo\" \"/showIncludes\" \"/utf-8\" \"-w\" \"/O2\" \"/Gw\" \"-DNPY_NO_DEPRECATED_API=0\" \"-DNPY_TARGET_VERSION=NPY_1_21_API_VERSION\" \"/Fdpandas\\_libs\\tslibs\\ccalendar.cp313-win_amd64.pyd.p\\meson-generated_pandas__libs_tslibs_ccalendar.pyx.c.pdb\" /Fopandas/_libs/tslibs/ccalendar.cp313-win_amd64.pyd.p/meson-generated_pandas__libs_tslibs_ccalendar.pyx.c.obj \"/c\" pandas/_libs/tslibs/ccalendar.cp313-win_amd64.pyd.p/pandas/_libs/tslibs/ccalendar.pyx.c\n",
      "      pandas/_libs/tslibs/ccalendar.cp313-win_amd64.pyd.p/pandas/_libs/tslibs/ccalendar.pyx.c(7376): error C2198: 'int _PyLong_AsByteArray(PyLongObject *,unsigned char *,size_t,int,int,int)': too few arguments for call\n",
      "      pandas/_libs/tslibs/ccalendar.cp313-win_amd64.pyd.p/pandas/_libs/tslibs/ccalendar.pyx.c(7686): error C2198: 'int _PyLong_AsByteArray(PyLongObject *,unsigned char *,size_t,int,int,int)': too few arguments for call\n",
      "      [15/151] Compiling Cython source C:/Users/natha/AppData/Local/Temp/pip-install-s9sm9xok/pandas_8646b2612ecc43dd8726d4e0a82d16da/pandas/_libs/tslibs/dtypes.pyx\n",
      "      [16/151] Compiling Cython source C:/Users/natha/AppData/Local/Temp/pip-install-s9sm9xok/pandas_8646b2612ecc43dd8726d4e0a82d16da/pandas/_libs/tslibs/np_datetime.pyx\n",
      "      [17/151] Compiling Cython source C:/Users/natha/AppData/Local/Temp/pip-install-s9sm9xok/pandas_8646b2612ecc43dd8726d4e0a82d16da/pandas/_libs/tslibs/nattype.pyx\n",
      "      [18/151] Compiling Cython source C:/Users/natha/AppData/Local/Temp/pip-install-s9sm9xok/pandas_8646b2612ecc43dd8726d4e0a82d16da/pandas/_libs/tslibs/conversion.pyx\n",
      "      [19/151] Compiling Cython source C:/Users/natha/AppData/Local/Temp/pip-install-s9sm9xok/pandas_8646b2612ecc43dd8726d4e0a82d16da/pandas/_libs/tslibs/fields.pyx\n",
      "      [20/151] Compiling Cython source C:/Users/natha/AppData/Local/Temp/pip-install-s9sm9xok/pandas_8646b2612ecc43dd8726d4e0a82d16da/pandas/_libs/tslibs/timezones.pyx\n",
      "      [21/151] Compiling Cython source C:/Users/natha/AppData/Local/Temp/pip-install-s9sm9xok/pandas_8646b2612ecc43dd8726d4e0a82d16da/pandas/_libs/tslibs/strptime.pyx\n",
      "      [22/151] Compiling Cython source C:/Users/natha/AppData/Local/Temp/pip-install-s9sm9xok/pandas_8646b2612ecc43dd8726d4e0a82d16da/pandas/_libs/tslibs/parsing.pyx\n",
      "      [23/151] Compiling Cython source C:/Users/natha/AppData/Local/Temp/pip-install-s9sm9xok/pandas_8646b2612ecc43dd8726d4e0a82d16da/pandas/_libs/tslibs/offsets.pyx\n",
      "      [24/151] Compiling Cython source C:/Users/natha/AppData/Local/Temp/pip-install-s9sm9xok/pandas_8646b2612ecc43dd8726d4e0a82d16da/pandas/_libs/tslibs/period.pyx\n",
      "      [25/151] Compiling Cython source C:/Users/natha/AppData/Local/Temp/pip-install-s9sm9xok/pandas_8646b2612ecc43dd8726d4e0a82d16da/pandas/_libs/tslibs/timestamps.pyx\n",
      "      [26/151] Compiling Cython source C:/Users/natha/AppData/Local/Temp/pip-install-s9sm9xok/pandas_8646b2612ecc43dd8726d4e0a82d16da/pandas/_libs/tslibs/timedeltas.pyx\n",
      "      ninja: build stopped: subcommand failed.\n",
      "      [end of output]\n",
      "  \n",
      "  note: This error originates from a subprocess, and is likely not a problem with pip.\n",
      "error: metadata-generation-failed\n",
      "\n",
      "× Encountered error while generating package metadata.\n",
      "╰─> See above for output.\n",
      "\n",
      "note: This is an issue with the package mentioned above, not pip.\n",
      "hint: See above for details.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: xgboost in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (2.1.4)\n",
      "Requirement already satisfied: numpy in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from xgboost) (2.1.3)\n",
      "Requirement already satisfied: scipy in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from xgboost) (1.15.1)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "ename": "",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31mThe Kernel crashed while executing code in the current cell or a previous cell. \n",
      "\u001b[1;31mPlease review the code in the cell(s) to identify a possible cause of the failure. \n",
      "\u001b[1;31mClick <a href='https://aka.ms/vscodeJupyterKernelCrash'>here</a> for more info. \n",
      "\u001b[1;31mView Jupyter <a href='command:jupyter.viewOutput'>log</a> for further details."
     ]
    }
   ],
   "source": [
    "#installs all the necessary packages\n",
    "%pip install pandas numpy matplotlib seaborn tabpfn\n",
    "%pip install scikit-learn torch gluonts huggingface-hub\n",
    "%pip install xgboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import sys\n",
    "print(\"Python Executable:\", sys.executable)\n",
    "print(\"Python Version:\", sys.version)\n",
    "%pip list | grep tensorflow\n",
    "\n",
    "\n",
    "#installing tensorflow\n",
    "%pip install tensorflow -y\n",
    "%pip install tensorflow --no-cache-dir\n",
    "!which jupyter\n",
    "!jupyter kernelspec list\n",
    "\n",
    "\n",
    "\n",
    "%pip uninstall tensorflow -y\n",
    "%pip install tensorflow --no-cache-dir\n",
    "python -m pip install tensorflow\n",
    "\n",
    "import xgboost as xgb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#xgboost is used for the online learning model\n",
    "import xgboost as xgb\n",
    "#machinelearning library\n",
    "import tensorflow as tf\n",
    "#neural network library\n",
    "from tensorflow.keras.models import Sequential\n",
    "#neural network layers\n",
    "from tensorflow.keras.layers import LSTM, Dense\n",
    "#loading and manipulating dataset\n",
    "import pandas as pd\n",
    "#numerical operations\n",
    "import numpy as np\n",
    "#visualizing data before training\n",
    "import matplotlib.pyplot as plt\n",
    "#makes statistical plots\n",
    "import seaborn as sns\n",
    "#splitting data into training and testing \n",
    "from sklearn.model_selection import train_test_split\n",
    "#calculating error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "#scaling data\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "#broad machine learning library\n",
    "import torch\n",
    "#neural network library\n",
    "import torch.nn as nn\n",
    "#download files from huggingface\n",
    "from huggingface_hub import hf_hub_download\n",
    "#optimization library\n",
    "import torch.optim as optim\n",
    "#GluonTS is used for dataset handling and evaluation\n",
    "from gluonts.dataset.pandas import PandasDataset\n",
    "from gluonts.evaluation import make_evaluation_predictions, Evaluator\n",
    "import os\n",
    "import sys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lag-llama repository already cloned\n",
      "Requirement already satisfied: gluonts<=0.14.4 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from gluonts[torch]<=0.14.4->-r lag-llama/requirements.txt (line 1)) (0.14.4)Note: you may need to restart the kernel to use updated packages.\n",
      "\n",
      "Requirement already satisfied: numpy>=1.23.5 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from -r lag-llama/requirements.txt (line 2)) (2.1.3)\n",
      "Requirement already satisfied: torch>=2.0.0 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from -r lag-llama/requirements.txt (line 3)) (2.6.0)\n",
      "Requirement already satisfied: wandb in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from -r lag-llama/requirements.txt (line 4)) (0.19.6)\n",
      "Requirement already satisfied: scipy in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from -r lag-llama/requirements.txt (line 5)) (1.15.1)\n",
      "Requirement already satisfied: pandas>=2.1.4 in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from -r lag-llama/requirements.txt (line 6)) (2.2.3)\n",
      "Requirement already satisfied: matplotlib in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from -r lag-llama/requirements.txt (line 8)) (3.10.0)\n",
      "Requirement already satisfied: huggingface_hub[cli] in c:\\users\\natha\\onedrive\\desktop\\maia project\\.venv\\lib\\site-packages (from -r lag-llama/requirements.txt (line 7)) (0.28.1)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip is available: 25.0 -> 25.0.1\n",
      "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model checkpoint already downloaded\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The token has not been saved to the git credentials helper. Pass `add_to_git_credential=True` in this function directly or `--add-to-git-credential` if using via `huggingface-cli` if you want to set the git credential as well.\n",
      "Token is valid (permission: read).\n",
      "The token `lag_llama-download-token` has been saved to C:\\Users\\natha\\.cache\\huggingface\\stored_tokens\n",
      "Your token has been saved to C:\\Users\\natha\\.cache\\huggingface\\token\n",
      "Login successful.\n",
      "The current active token is: `lag_llama-download-token`\n"
     ]
    }
   ],
   "source": [
    "#installing lag-llama\n",
    "#skips this step if the repository is already cloned\n",
    "if not os.path.exists('lag-llama'):\n",
    "#clones the lag-llama repository\n",
    "    !git clone https://github.com/time-series-foundation-models/lag-llama.git\n",
    "    print (\"repository cloned successfully\")\n",
    "else:\n",
    "    print (\"lag-llama repository already cloned\")\n",
    "#installs the requirements\n",
    "%pip install -r lag-llama/requirements.txt --no-deps\n",
    "#first ensure you're logged in to huggingface\n",
    "!huggingface-cli login --token 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\n",
    "#skips this step if the model is already downloaded\n",
    "if not os.path.exists('lag-llama.ckpt'):\n",
    "    try:\n",
    "       # Download using the Hugging Face hub library \n",
    "        file = hf_hub_download(\n",
    "            repo_id=\"time-series-foundation-models/Lag-Llama\",\n",
    "            filename=\"lag-llama.ckpt\",\n",
    "            local_dir=\".\",\n",
    "            token=True  \n",
    "        )\n",
    "        print(f\"Downloaded {file} successfully\")\n",
    "    except Exception as e:\n",
    "        print(f\"Error downloading model: {e}\")\n",
    "else:\n",
    "    print (\"model checkpoint already downloaded\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is df1 182564\n",
      "this is df2 685\n"
     ]
    }
   ],
   "source": [
    "#reads each .csv file\n",
    "df1 = pd.read_csv('facility (4).csv')\n",
    "df2 = pd.read_csv('sumo1b (2).csv')\n",
    "print (\"this is df1\" , len(df1))\n",
    "print (\"this is df2\" , len(df2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of NaN values before filtering\n",
      "181932\n",
      "0\n",
      "number of NaN values after filtering\n",
      "0\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "#counts the number of NaN values\n",
    "print (\"number of NaN values before filtering\")\n",
    "print (df1['EFF_OP'].isna().sum().sum())\n",
    "print (df2['EFF_OP'].isna().sum().sum())\n",
    "\n",
    "#removes rows with NaN values\n",
    "df_filtered1 = df1.dropna(subset=['EFF_OP'])\n",
    "df_filtered2 = df2.dropna(subset=['EFF_OP'])\n",
    "\n",
    "print (\"number of NaN values after filtering\")\n",
    "print (df_filtered1['EFF_OP'].isna().sum().sum())\n",
    "print (df_filtered2['EFF_OP'].isna().sum().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 Observed Data\n",
      "MeasurementDate               \n",
      "2023-05-03               0.023\n",
      "2023-05-04               0.037\n",
      "2023-05-05               0.043\n",
      "2023-05-06               0.042\n",
      "2023-05-07               0.033\n",
      "...                        ...\n",
      "2025-01-19               0.075\n",
      "2025-01-20               0.109\n",
      "2025-01-21               0.071\n",
      "2025-01-22               0.080\n",
      "2025-01-23               0.068\n",
      "\n",
      "[632 rows x 1 columns]\n"
     ]
    }
   ],
   "source": [
    "# Set 'Date' as index and convert to datetime\n",
    "facility_df = df_filtered1.set_index('MeasurementDate')\n",
    "facility_df.index = pd.to_datetime(facility_df.index)\n",
    "\n",
    "#converts to dataframe and renames columns\n",
    "facility_df=facility_df['EFF_OP'].to_frame()\n",
    "facility_df.rename(columns={'EFF_OP': 'Observed Data'}, inplace=True)\n",
    "\n",
    "print (facility_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            Modeled Data\n",
      "Date                    \n",
      "2023-03-11      0.380843\n",
      "2023-03-12      1.116526\n",
      "2023-03-13      0.035781\n",
      "2023-03-14      0.017136\n",
      "2023-03-15      0.018869\n",
      "...                  ...\n",
      "2025-01-19      0.042503\n",
      "2025-01-20      0.043072\n",
      "2025-01-21      0.043216\n",
      "2025-01-22      0.708176\n",
      "2025-01-23      0.708176\n",
      "\n",
      "[685 rows x 1 columns]\n"
     ]
    }
   ],
   "source": [
    "#creates copy of sumo df with just Date and EFF_OP\n",
    "sumo1b_df = df_filtered2[['Date', 'EFF_OP']]\n",
    "\n",
    "#set 'Date' as index\n",
    "sumo1b_df.set_index('Date', inplace=True)\n",
    "\n",
    "#convert to datetime object\n",
    "sumo1b_df.index = pd.to_datetime(sumo1b_df.index)\n",
    "\n",
    "#rename EFF_OP to modeled data\n",
    "sumo1b_df = sumo1b_df.rename(columns={'EFF_OP': 'Modeled Data'})\n",
    "print (sumo1b_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 Observed Data\n",
      "MeasurementDate               \n",
      "2023-05-03           -0.538617\n",
      "2023-05-04           -0.364050\n",
      "2023-05-05           -0.289235\n",
      "2023-05-06           -0.301704\n",
      "2023-05-07           -0.413926\n",
      "...                        ...\n",
      "2025-01-19            0.109775\n",
      "2025-01-20            0.533724\n",
      "2025-01-21            0.059899\n",
      "2025-01-22            0.172121\n",
      "2025-01-23            0.022492\n",
      "\n",
      "[632 rows x 1 columns]\n",
      "            Modeled Data\n",
      "Date                    \n",
      "2023-03-11      2.093095\n",
      "2023-03-12      6.981088\n",
      "2023-03-13     -0.199553\n",
      "2023-03-14     -0.323431\n",
      "2023-03-15     -0.311921\n",
      "...                  ...\n",
      "2025-01-19     -0.154894\n",
      "2025-01-20     -0.151110\n",
      "2025-01-21     -0.150152\n",
      "2025-01-22      4.267942\n",
      "2025-01-23      4.267942\n",
      "\n",
      "[685 rows x 1 columns]\n"
     ]
    }
   ],
   "source": [
    "#Gets mean and standard deviation for both datasets\n",
    "facility_data_mean = facility_df['Observed Data'].mean()\n",
    "facility_data_std = facility_df['Observed Data'].std()\n",
    "\n",
    "sumo_data_mean = sumo1b_df['Modeled Data'].mean()\n",
    "sumo_data_std = sumo1b_df['Modeled Data'].std()\n",
    "\n",
    "# Normalize the observed column\n",
    "facility_df = (facility_df - facility_data_mean) / facility_data_std\n",
    "\n",
    "# Normalize the modeled column\n",
    "sumo1b_df = (sumo1b_df - sumo_data_mean) / sumo_data_std\n",
    "\n",
    "print (facility_df)\n",
    "print (sumo1b_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            Observed Data  Modeled Data     Error\n",
      "2023-05-03      -0.538617     -0.106254  0.432362\n",
      "2023-05-04      -0.364050     -0.104736  0.259314\n",
      "2023-05-05      -0.289235     -0.103657  0.185579\n",
      "2023-05-06      -0.301704     -0.102306  0.199399\n",
      "2023-05-07      -0.413926     -0.101823  0.312103\n",
      "...                   ...           ...       ...\n",
      "2025-01-19       0.109775     -0.154894 -0.264670\n",
      "2025-01-20       0.533724     -0.151110 -0.684833\n",
      "2025-01-21       0.059899     -0.150152 -0.210051\n",
      "2025-01-22       0.172121      4.267942  4.095822\n",
      "2025-01-23       0.022492      4.267942  4.245451\n",
      "\n",
      "[632 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "# combine the DataFrames\n",
    "combined_df = pd.concat([facility_df, sumo1b_df], axis=1)\n",
    "\n",
    "#Creates a third column that is modeled - observed = error\n",
    "error = combined_df['Modeled Data'] - combined_df['Observed Data']\n",
    "combined_df['Error'] = error\n",
    "\n",
    "#Rename the column with the dates to 'measurementDate'\n",
    "combined_df.rename(columns={0: \"MeasurementDate\"}, inplace=True)\n",
    "\n",
    "#drops the NaN values\n",
    "combined_df = combined_df.dropna()\n",
    "\n",
    "print(combined_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#gets mean and standard deviation for Error column\n",
    "Error_data_mean = combined_df['Error'].mean()\n",
    "Error_data_std = combined_df['Error'].std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Observed Data  Modeled Data     Error\n",
      "0        -0.538617     -0.106254  0.432362\n",
      "1        -0.364050     -0.104736  0.259314\n",
      "2        -0.289235     -0.103657  0.185579\n",
      "3        -0.301704     -0.102306  0.199399\n",
      "4        -0.413926     -0.101823  0.312103\n",
      "..             ...           ...       ...\n",
      "627       0.109775     -0.154894 -0.264670\n",
      "628       0.533724     -0.151110 -0.684833\n",
      "629       0.059899     -0.150152 -0.210051\n",
      "630       0.172121      4.267942  4.095822\n",
      "631       0.022492      4.267942  4.245451\n",
      "\n",
      "[632 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "# Reset the index to make the date index a regular column\n",
    "combined_df.reset_index(inplace=True)\n",
    "\n",
    "# Pop the date column\n",
    "date_time = pd.to_datetime(combined_df.pop(combined_df.columns[0]), format='%Y-%m-%d')\n",
    "print (combined_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Observed Data  Modeled Data     Error\n",
      "0        -0.538617     -0.104736  0.432362\n",
      "1        -0.364050     -0.103657  0.259314\n",
      "2        -0.289235     -0.102306  0.185579\n",
      "3        -0.301704     -0.101823  0.199399\n",
      "4        -0.413926     -0.091615  0.312103\n",
      "..             ...           ...       ...\n",
      "627       0.109775     -0.151110 -0.264670\n",
      "628       0.533724     -0.150152 -0.684833\n",
      "629       0.059899      4.267942 -0.210051\n",
      "630       0.172121      4.267942  4.095822\n",
      "631       0.022492           NaN  4.245451\n",
      "\n",
      "[632 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "#Shift the 'modeled data' column back one\n",
    "combined_df['Modeled Data'] = combined_df['Modeled Data'].shift(-1)\n",
    "print (combined_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#creates two plots to visualize the evolution of the Error value\n",
    "plot_cols = ['Observed Data', 'Modeled Data', 'Error']\n",
    "plot_features = combined_df[plot_cols]\n",
    "# Adjust date_time to match the length of plot_features\n",
    "plot_features.index = date_time[:len(plot_features)]  # Use slicing to select the appropriate number of elements\n",
    "_ = plot_features.plot(subplots=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0]\tvalidation_0-rmse:0.94178\n",
      "[1]\tvalidation_0-rmse:0.88341\n",
      "[2]\tvalidation_0-rmse:0.83601\n",
      "[3]\tvalidation_0-rmse:0.80012\n",
      "[4]\tvalidation_0-rmse:0.77587\n",
      "[5]\tvalidation_0-rmse:0.76636\n",
      "[6]\tvalidation_0-rmse:0.77108\n",
      "[7]\tvalidation_0-rmse:0.76437\n",
      "[8]\tvalidation_0-rmse:0.78161\n",
      "[9]\tvalidation_0-rmse:0.77628\n",
      "[10]\tvalidation_0-rmse:0.79923\n",
      "[11]\tvalidation_0-rmse:0.82840\n",
      "[12]\tvalidation_0-rmse:0.85903\n",
      "[13]\tvalidation_0-rmse:0.88650\n",
      "[14]\tvalidation_0-rmse:0.91964\n",
      "[15]\tvalidation_0-rmse:0.95081\n",
      "[16]\tvalidation_0-rmse:0.97801\n",
      "[17]\tvalidation_0-rmse:0.97924\n",
      "[18]\tvalidation_0-rmse:1.00708\n",
      "[19]\tvalidation_0-rmse:1.03970\n",
      "[20]\tvalidation_0-rmse:1.07027\n",
      "[21]\tvalidation_0-rmse:1.09623\n",
      "[22]\tvalidation_0-rmse:1.11863\n",
      "[23]\tvalidation_0-rmse:1.14125\n",
      "[24]\tvalidation_0-rmse:1.16725\n",
      "[25]\tvalidation_0-rmse:1.18833\n",
      "[26]\tvalidation_0-rmse:1.21104\n",
      "[27]\tvalidation_0-rmse:1.23142\n",
      "[28]\tvalidation_0-rmse:1.25285\n",
      "[29]\tvalidation_0-rmse:1.27025\n",
      "[30]\tvalidation_0-rmse:1.28789\n",
      "[31]\tvalidation_0-rmse:1.30509\n",
      "[32]\tvalidation_0-rmse:1.32134\n",
      "[33]\tvalidation_0-rmse:1.31884\n",
      "[34]\tvalidation_0-rmse:1.31417\n",
      "[35]\tvalidation_0-rmse:1.32781\n",
      "[36]\tvalidation_0-rmse:1.34243\n",
      "[37]\tvalidation_0-rmse:1.33938\n",
      "[38]\tvalidation_0-rmse:1.34979\n",
      "[39]\tvalidation_0-rmse:1.36287\n",
      "[40]\tvalidation_0-rmse:1.37531\n",
      "[41]\tvalidation_0-rmse:1.38341\n",
      "[42]\tvalidation_0-rmse:1.38334\n",
      "[43]\tvalidation_0-rmse:1.38187\n",
      "[44]\tvalidation_0-rmse:1.38051\n",
      "[45]\tvalidation_0-rmse:1.39031\n",
      "[46]\tvalidation_0-rmse:1.39980\n",
      "[47]\tvalidation_0-rmse:1.40938\n",
      "[48]\tvalidation_0-rmse:1.40804\n",
      "[49]\tvalidation_0-rmse:1.41687\n",
      "[50]\tvalidation_0-rmse:1.41537\n",
      "[51]\tvalidation_0-rmse:1.41498\n",
      "[52]\tvalidation_0-rmse:1.41463\n",
      "[53]\tvalidation_0-rmse:1.42219\n",
      "[54]\tvalidation_0-rmse:1.42152\n",
      "[55]\tvalidation_0-rmse:1.42765\n",
      "[56]\tvalidation_0-rmse:1.43370\n",
      "[57]\tvalidation_0-rmse:1.43884\n",
      "[58]\tvalidation_0-rmse:1.44277\n",
      "[59]\tvalidation_0-rmse:1.44286\n",
      "[60]\tvalidation_0-rmse:1.44772\n",
      "[61]\tvalidation_0-rmse:1.44705\n",
      "[62]\tvalidation_0-rmse:1.44961\n",
      "[63]\tvalidation_0-rmse:1.44893\n",
      "[64]\tvalidation_0-rmse:1.44901\n",
      "[65]\tvalidation_0-rmse:1.45178\n",
      "[66]\tvalidation_0-rmse:1.45225\n",
      "[67]\tvalidation_0-rmse:1.45179\n",
      "[68]\tvalidation_0-rmse:1.45155\n",
      "[69]\tvalidation_0-rmse:1.45132\n",
      "[70]\tvalidation_0-rmse:1.45168\n",
      "[71]\tvalidation_0-rmse:1.45413\n",
      "[72]\tvalidation_0-rmse:1.45542\n",
      "[73]\tvalidation_0-rmse:1.45590\n",
      "[74]\tvalidation_0-rmse:1.45622\n",
      "[75]\tvalidation_0-rmse:1.45665\n",
      "[76]\tvalidation_0-rmse:1.45702\n",
      "[77]\tvalidation_0-rmse:1.45697\n",
      "[78]\tvalidation_0-rmse:1.45631\n",
      "[79]\tvalidation_0-rmse:1.45637\n",
      "[80]\tvalidation_0-rmse:1.45589\n",
      "[81]\tvalidation_0-rmse:1.45587\n",
      "[82]\tvalidation_0-rmse:1.45597\n",
      "[83]\tvalidation_0-rmse:1.45621\n",
      "[84]\tvalidation_0-rmse:1.45616\n",
      "[85]\tvalidation_0-rmse:1.45628\n",
      "[86]\tvalidation_0-rmse:1.45641\n",
      "[87]\tvalidation_0-rmse:1.45659\n",
      "[88]\tvalidation_0-rmse:1.45639\n",
      "[89]\tvalidation_0-rmse:1.45665\n",
      "[90]\tvalidation_0-rmse:1.45640\n",
      "[91]\tvalidation_0-rmse:1.45611\n",
      "[92]\tvalidation_0-rmse:1.45638\n",
      "[93]\tvalidation_0-rmse:1.45637\n",
      "[94]\tvalidation_0-rmse:1.45635\n",
      "[95]\tvalidation_0-rmse:1.45648\n",
      "[96]\tvalidation_0-rmse:1.45652\n",
      "[97]\tvalidation_0-rmse:1.45574\n",
      "[98]\tvalidation_0-rmse:1.45568\n",
      "[99]\tvalidation_0-rmse:1.45583\n",
      "Training RMSE: 0.0703\n",
      "Validation RMSE: 1.4558\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Create date based features for prediction\n",
    "combined_df['day_of_week'] = date_time.dt.dayofweek\n",
    "combined_df['day_of_month'] = date_time.dt.day \n",
    "combined_df['month'] = date_time.dt.month\n",
    "combined_df['year'] = date_time.dt.year\n",
    "\n",
    "#Create sequences for time series prediction\n",
    "def create_subsequences(data, input_length, forecast_length, target_cols):\n",
    "    subsequences = []\n",
    "    for i in range(len(data) - input_length - forecast_length + 1):\n",
    "        # Get input sequence\n",
    "        input_data = data.iloc[i:i+input_length][target_cols].values\n",
    "        # Get target sequence\n",
    "        target_data = data.iloc[i+input_length:i+input_length+forecast_length][target_cols].values\n",
    "        # Get start date for this sequence\n",
    "        start_date = date_time[i]\n",
    "        subsequences.append((input_data, target_data, start_date))\n",
    "    return subsequences\n",
    "\n",
    "# Prepare data for XGBoost\n",
    "input_length = 7  # Use 7 days of history\n",
    "forecast_length = 1  # Predict 1 day ahead\n",
    "target_cols = ['Error', 'day_of_week', 'day_of_month', 'month', 'year']\n",
    "\n",
    "# Create sequences\n",
    "sequences = create_subsequences(combined_df, input_length, forecast_length, target_cols)\n",
    "\n",
    "# Split into features and targets\n",
    "X = np.array([seq[0] for seq in sequences])\n",
    "y = np.array([seq[1][0][0] for seq in sequences])  # Only take Error value as target\n",
    "\n",
    "# Reshape for XGBoost (2D array)\n",
    "X = X.reshape(X.shape[0], -1)\n",
    "\n",
    "# Split into train/validation sets\n",
    "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Initialize XGBoost model\n",
    "model = xgb.XGBRegressor(\n",
    "    objective='reg:squarederror',\n",
    "    n_estimators=100,\n",
    "    learning_rate=0.1,\n",
    "    max_depth=6,\n",
    "    random_state=42\n",
    ")\n",
    "\n",
    "# Train model\n",
    "model.fit(\n",
    "    X_train, \n",
    "    y_train,\n",
    "    eval_set=[(X_val, y_val)],\n",
    "    verbose=True\n",
    ")\n",
    "\n",
    "# Make predictions\n",
    "train_preds = model.predict(X_train)\n",
    "val_preds = model.predict(X_val)\n",
    "\n",
    "# Calculate metrics\n",
    "train_rmse = np.sqrt(mean_squared_error(y_train, train_preds))\n",
    "val_rmse = np.sqrt(mean_squared_error(y_val, val_preds))\n",
    "\n",
    "print(f\"Training RMSE: {train_rmse:.4f}\")\n",
    "print(f\"Validation RMSE: {val_rmse:.4f}\")\n",
    "\n",
    "# Plot actual vs predicted for validation set\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(y_val[:50], label='Actual')\n",
    "plt.plot(val_preds[:50], label='Predicted')\n",
    "plt.title('Actual vs Predicted Error Values (First 50 Validation Samples)')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#\n",
    "# #\n",
    "# #\n",
    "# #\n",
    "# #\n",
    "# #\n",
    "# # Prepare data for RNN\n",
    "def create_sequences(data, seq_length):\n",
    "    X, y = [], []\n",
    "    for i in range(len(data) - seq_length):\n",
    "        X.append(data[i:(i + seq_length)])\n",
    "        y.append(data[i + seq_length])\n",
    "    return np.array(X), np.array(y)\n",
    "\n",
    "# Scale the data\n",
    "scaler = MinMaxScaler()\n",
    "error_scaled = scaler.fit_transform(combined_df['Error'].values.reshape(-1, 1))\n",
    "\n",
    "# Create sequences for RNN\n",
    "seq_length = 10  # Number of time steps to look back\n",
    "X_rnn, y_rnn = create_sequences(error_scaled, seq_length)\n",
    "\n",
    "# Split into train/validation sets\n",
    "train_size = int(len(X_rnn) * 0.8)\n",
    "X_train = X_rnn[:train_size]\n",
    "X_val = X_rnn[train_size:]\n",
    "y_train = y_rnn[:train_size]\n",
    "y_val = y_rnn[train_size:]\n",
    "\n",
    "# Build RNN model\n",
    "model = Sequential([\n",
    "    LSTM(50, activation='relu', input_shape=(seq_length, 1), return_sequences=True),\n",
    "    LSTM(50, activation='relu'),\n",
    "    Dense(1)\n",
    "])\n",
    "\n",
    "# Compile model\n",
    "model.compile(optimizer='adam', loss='mse')\n",
    "\n",
    "# Train model\n",
    "history = model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=50,\n",
    "    batch_size=32,\n",
    "    validation_data=(X_val, y_val),\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Make predictions\n",
    "train_pred = model.predict(X_train)\n",
    "val_pred = model.predict(X_val)\n",
    "\n",
    "# Inverse transform predictions\n",
    "train_pred = scaler.inverse_transform(train_pred)\n",
    "val_pred = scaler.inverse_transform(val_pred)\n",
    "y_train_orig = scaler.inverse_transform(y_train)\n",
    "y_val_orig = scaler.inverse_transform(y_val)\n",
    "\n",
    "# Calculate RMSE\n",
    "train_rmse = np.sqrt(mean_squared_error(y_train_orig, train_pred))\n",
    "val_rmse = np.sqrt(mean_squared_error(y_val_orig, val_pred))\n",
    "\n",
    "print(f\"Training RMSE: {train_rmse:.4f}\")\n",
    "print(f\"Validation RMSE: {val_rmse:.4f}\")\n",
    "\n",
    "# Plot results\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(y_val_orig[:100], label='Actual')\n",
    "plt.plot(val_pred[:100], label='Predicted')\n",
    "plt.title('RNN: Actual vs Predicted Error Values (First 100 Validation Samples)')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'Series' object has no attribute 'dayofweek'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_41668\\3822358377.py\u001b[0m in \u001b[0;36m?\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m#Create date based features for prediction\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mcombined_df\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'day_of_week'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdate_time\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdayofweek\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mcombined_df\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'day_of_month'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdate_time\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mday\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[0mcombined_df\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'month'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdate_time\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmonth\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mcombined_df\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'year'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdate_time\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0myear\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\Users\\natha\\OneDrive\\Desktop\\MAIA Project\\.venv\\Lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m?\u001b[1;34m(self, name)\u001b[0m\n\u001b[0;32m   6295\u001b[0m             \u001b[1;32mand\u001b[0m \u001b[0mname\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_accessors\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   6296\u001b[0m             \u001b[1;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   6297\u001b[0m         \u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   6298\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 6299\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m: 'Series' object has no attribute 'dayofweek'"
     ]
    }
   ],
   "source": [
    "#Create date based features for prediction\n",
    "combined_df['day_of_week'] = date_time.dayofweek\n",
    "combined_df['day_of_month'] = date_time.day\n",
    "combined_df['month'] = date_time.month\n",
    "combined_df['year'] = date_time.year\n",
    "\n",
    "#Create feature columns list for the online machine learning model\n",
    "feature_cols = ['day_of_week', 'day_of_month', 'month', 'year']\n",
    "X = combined_df[feature_cols]\n",
    "y = combined_df['Error']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2. Create features for prediction\n",
    "# We'll use a simple time-based feature approach\n",
    "aligned_data['hour'] = aligned_data.index.hour\n",
    "aligned_data['day_of_week'] = aligned_data.index.dayofweek\n",
    "aligned_data['month'] = aligned_data.index.month\n",
    "\n",
    "# 3. Prepare the data for online learning\n",
    "# Create feature columns list\n",
    "feature_cols = ['hour', 'day_of_week', 'month']\n",
    "X = aligned_data[feature_cols]\n",
    "y = aligned_data['EFF_OP_diff']\n",
    "\n",
    "# 4. Initialize the Adaptive Random Forest model\n",
    "from river import forest\n",
    "from river import metrics\n",
    "\n",
    "# Initialize the model\n",
    "model = forest.ARFRegressor(\n",
    "    n_models=10,  # number of trees\n",
    "    seed=42,      # for reproducibility\n",
    "    leaf_prediction='mean'\n",
    ")\n",
    "\n",
    "# Initialize metric for tracking performance\n",
    "metric = metrics.MSE()\n",
    "\n",
    "# 5. Online learning and prediction\n",
    "predictions = []\n",
    "true_values = []\n",
    "\n",
    "for xi, yi in zip(X.to_dict('records'), y):\n",
    "    # Make prediction\n",
    "    pred = model.predict_one(xi)\n",
    "    predictions.append(pred)\n",
    "    \n",
    "    # Update the model\n",
    "    model.learn_one(xi, yi)\n",
    "    \n",
    "    # Update metric\n",
    "    if pred is not None:  # Skip the first prediction which will be None\n",
    "        metric.update(yi, pred)\n",
    "        true_values.append(yi)\n",
    "\n",
    "# 6. Visualize results\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(true_values, label='Actual Difference')\n",
    "plt.plot(predictions[1:], label='Predicted Difference')  # Skip first None prediction\n",
    "plt.title('ARF Model: Actual vs Predicted EFF_OP Difference')\n",
    "plt.xlabel('Time')\n",
    "plt.ylabel('EFF_OP Difference')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# Print final model performance\n",
    "print(f\"Final MSE: {metric.get()}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
